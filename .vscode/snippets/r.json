{
    "Read data from Airtable": {
        "prefix": "airtable",
        "body": [
            "## Read Data from Airtable",
            "at_data <- airtable(base = \"$1\", tables = c(\"$2\"))",
            "at_dat <- at_data\\$${2:tableName}\\$select_all()"
        ],
        "description": "Read data from an Airtable Base"
    },
    "Define a function to generate summary demographic stats": {
        "prefix": "demSummary",
        "body": [
            "# Define a function to quickly generate summary demographic stats",
            "dem_summary <- function(inpt_data, ...) {",
            "    inpt_data %>%",
            "    group_by(...) %>%",
            "    summarize(n = n()) %>%",
            "    mutate(pctTotal = n / sum(n))",
            "}"
        ],
        "description": "Define a function to generate summary demographic stats"
    },
    "Insert function to generate basic demographic summary charts": {
        "prefix": "demChart",
        "body": [
            "get_dem_chart <- function(data, dimension, metric) {",
            "    num_format <- \",\"",
            "    metric_title <- \"Count\"",
            "    if(metric == \"pctTotal\"){",
            "        num_format <- \".0%\"",
            "        metric_title <- \"Share of Total\"",
            "    }",
            "",
            "    vl_chart() %>%",
            "    vl_add_data_frame(data) %>%",
            "    vl_encode_y(",
            "        field = metric,",
            "        type = \"quantitative\",",
            "        axis = list(",
            "            title = metric_title,",
            "            format = num_format,",
            "            grid = FALSE",
            "        )",
            "    ) %>%",
            "    vl_encode_x(",
            "        field = dimension,",
            "        type = \"nominal\",",
            "        axis = list(title = dimension, grid = FALSE),",
            "        sort = list(field = metric, op = \"sum\", order = \"descending\")",
            "    ) %>%",
            "    vl_mark_bar() %>%",
            "    vl_mark_text(dy = -15) %>%",
            "    vl_encode_text(field = metric, format = num_format) %>%",
            "    vl_apply_rsn() %>%",
            "    vl_config_text(",
            "        font = \"Open Sans\"",
            "    )",
            "}"
        ],
        "description": "Insert function to generate basic demographic summary charts"
    },
    "Add title and properties to VL Chart ": {
        "prefix": "vlProperties",
        "body": [
            " vl_add_properties(",
            "        title = list(",
            "            text = \"$1\",",
            "            subtitle = \"$2\"",
            "        ),",
            "        width = 850,",
            "        height = 400,",
            "        padding = 10",
            "    )"
        ],
        "description": "Add title and properties to VL Chart "
    },
    "make_tr_map": {
        "prefix": "trMap",
        "body": [
            "make_tr_map <- function(data, dimension, metric, chart_title, chart_subtitle){",
            "    # Geometry file for Turkish provinces",
            "    tr_map <- \"https://gist.githubusercontent.com/kcole-rsn/8f7a2d72d81bb7374e519bde9cf6b0e7/raw/8cfd78e6eb3f092563a7193b68a020f0d1885b29/turkiye.topojson\"",
            "    ",
            "    vl_chart(",
            "    width = 850, height = 400, padding = 20",
            ") %>%",
            "    vl_add_data(",
            "        url = tr_map,",
            "        format = list(",
            "            type = \"topojson\",",
            "            feature = \"provinces\"",
            "        )",
            "    ) %>%",
            "    vl_lookup(",
            "        lookup = \"properties.ISO_CODE_\",",
            "        from = list(",
            "            data =  list(values = data),",
            "            key = \"isoCode\",",
            "            fields = list(dimension)",
            "        ),",
            "        default = \"0\"",
            "    ) %>%",
            "    vl_add_properties(",
            "        projection = list(type = \"mercator\")",
            "    ) %>%",
            "    vl_mark_geoshape() %>%",
            "    vl_encode_color(metric,",
            "        type = \"quantitative\",",
            "        condition = list(",
            "            test = \"datum[metric] < 1\",",
            "            value = \"#aaa\"",
            "        )",
            "    ) %>%",
            "    vl_legend_color(title = metric) %>%",
            "    vl_add_properties(",
            "        title = list(",
            "            text = chart_title,",
            "            subtitle = chart_subtitle)",
            "    ) %>%",
            "    vl_apply_rsn()",
            "",
            "}"
        ],
        "description": "make_tr_map"
    },
    "ISO Convert": {
        "prefix": "isoConvert",
        "body": [
            "# This library has ISO codes and names of provinces for different countries",
            "library(ISOcodes)",
            "# This library helps to ensure we match despite encoding issues",
            "library(stringi)",
            "",
            "# Grab just the province-level ISO data so we can grab the names for each province",
            "iso_codes <- ISO_3166_2",
            "iso_codes$NameClean <- stringi::stri_trans_general(iso_codes$Name, rules = \"Latin-ASCII\")",
            "",
            "# This little function takes a ISO code like \"TR-34\" and returns \"Istanbul\"",
            "name_to_code <- function(input) {",
            "    input <- stringi::stri_trans_general(input, rules = \"Latin-ASCII\")",
            "    match <- iso_codes[iso_codes$`NameClean` == input, ]",
            "    if (nrow(match) == 0) {",
            "        return(\"No match\")",
            "    }",
            "    return(match$`Code`)",
            "}",
            "",
            "code_to_name <- function(input) {",
            "    match <- iso_codes[iso_codes$`Code` == input, ]",
            "    if (nrow(match) == 0) {",
            "        return(\"No match\")",
            "    }",
            "    return(match$`Name`)",
            "}"
        ],
        "description": "ISO Convert"
    }
}